@{
    ViewData["Title"] = "Optimization";
}

<h1 class="text-2xl mb-3 font-bold">@ViewData["Title"]</h1>
<div class="flex justify-between mb-2">
    <label for="optimizationAlgorithm" class="flex items-center">Optimization Algorithm:</label>
    <select id="selectedAlgorithms" class="select select-bordered w-full max-w-xs" data-algorithms>
        <option value="ABC" selected>ABC</option>
        <option value="Gradient">Gradient</option>
        <option value="GTOA">GTOA</option>
    </select>
</div>

<div>
    <form id="abcForm" action="/Home/RunOptimization" method="post" data-form="ABC">
        @foreach (var paramInfo in ViewBag.ParamsInfoList[0])
        {
            <div class="flex justify-between mb-2">
                <label class="flex items-center">@paramInfo.Name:</label>
                <input type="number" id="@paramInfo.Name" name="@paramInfo.Name" required placeholder="Type here" class="input input-bordered w-full max-w-xs"
                       oninput="validateInput(this, @paramInfo.LowerBoundary, @paramInfo.UpperBoundary, @paramInfo.Name)" />

            </div>
        }

        <div class="flex justify-between mb-2">
            <label for="objectiveFunction" class="flex items-center">Objective Function:</label>
            <select id="objectiveFunction" class="select select-bordered w-full max-w-xs" data-objfun>
                <option selected value="SphereFunction">Sphere Function</option>
                <option value="RosenbrockFunction">Rosenbrock Function</option>
                <option value="RastriginFunction">Rastrigin Function</option>
                <option value="tsfde_inv">tsfde_inv</option>
                <option value="przyklad">przyklad</option>
            </select>
        </div>


        <button type="submit" id="abcSubmitButton" class="btn mb-3">Run ABC Optimization</button>
    </form>
    <form class="hidden" id="gradientForm" action="/Home/RunOptimization" method="post" data-form="Gradient">
        @foreach (var paramInfo in ViewBag.ParamsInfoList[1])
        {
            <div class="flex justify-between mb-2">
                <label class="flex items-center">@paramInfo.Name:</label>
                <input type="number" id="@paramInfo.Name" name="@paramInfo.Name" required placeholder="Type here" class="input input-bordered w-full max-w-xs"
                       min="@paramInfo.UpperBoundary" max="@paramInfo.LowerBoundary" />

            </div>
        }

        <div class="flex justify-between mb-2">
            <label for="objectiveFunctionG" class="flex items-center">Objective Function:</label>
            <select id="objectiveFunctionG" class="select select-bordered w-full max-w-xs" data-objfun>
                <option selected value="SphereFunction">Sphere Function</option>
                <option value="RosenbrockFunction">Rosenbrock Function</option>
                <option value="RastriginFunction">Rastrigin Function</option>
                <option value="tsfde_inv">tsfde_inv</option>
                <option value="przyklad">przyklad</option>
            </select>
        </div>


        <button type="submit" id="gradientSubmitButton" class="btn mb-3">Run Gradient Optimization</button>
    </form>
    <form class="hidden" id="gtoaForm" action="/Home/RunOptimization" method="post" data-form="GTOA">
        @foreach (var paramInfo in ViewBag.ParamsInfoList[2])
        {
            <div class="flex justify-between mb-2">
                <label class="flex items-center">@paramInfo.Name:</label>
                <input type="number" id="@paramInfo.Name" name="@paramInfo.Name" required placeholder="Type here" class="input input-bordered w-full max-w-xs"
                       min="@paramInfo.UpperBoundary" max="@paramInfo.LowerBoundary" />

            </div>
        }

        <div class="flex justify-between mb-2">
            <label for="objectiveFunctionO" class="flex items-center">Objective Function:</label>
            <select id="objectiveFunctionO" class="select select-bordered w-full max-w-xs" data-objfun>
                <option selected value="SphereFunction">Sphere Function</option>
                <option value="RosenbrockFunction">Rosenbrock Function</option>
                <option value="RastriginFunction">Rastrigin Function</option>
                <option value="tsfde_inv">tsfde_inv</option>
                <option value="przyklad">przyklad</option>
            </select>
        </div>


        <button type="submit" id="gtoaSubmitButton" class="btn mb-3">Run GTOA Optimization</button>
    </form>
    <div data-badges class="flex flex-wrap gap-1">
        <div class="badge badge-info gap-2">
            <svg data-badge-delete="SphereFunction" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-4 h-4 stroke-current"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
            SphereFunction
        </div>
    </div>
</div>

@* @using (Html.BeginForm("RunOptimization", "Home", FormMethod.Post, new { id = "gradientForm" }))
{
    <div>
        @foreach (var paramInfo in ViewBag.ParamsInfoList[1])
        {

            <div>
                <label>@paramInfo.Name:</label>
                <input type="text" id="@paramInfo.Name" name="@paramInfo.Name" />
            </div>
        }
    </div>

    <label for="objectiveFunction">Objective Function:</label>
    <select id="objectiveFunction">
        <option value="SphereFunction">Sphere Function</option>
        <option value="RosenbrockFunction">Rosenbrock Function</option>
        <option value="RastriginFunction">Rastrigin Function</option>
    </select>

    <br>

    <button type="submit" id="gradientSubmitButton">Run Gradient Optimization</button>
} *@

<div id="resultContainer">
</div>
<div id="resultsContainer"></div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script>
        function validateInput(input, max, min, name) {
            var value = parseFloat(input.value);

            if (!isNaN(value) && name != limit) {
                if (!isNaN(min) && value < min) {
                    input.setCustomValidity('Value must be greater than or equal to ' + min);
                } else if (!isNaN(max) && value > max) {
                    input.setCustomValidity('Value must be less than or equal to ' + max);
                } else {
                    input.setCustomValidity('');
                }
            } else {
                input.setCustomValidity('Please enter a valid number');
            }
        }
        const algorithms = document.querySelector('[data-algorithms]');
        const forms = document.querySelectorAll("[data-form]");

        algorithms.addEventListener('change', (e) => {
            const selectedAlgorithm = e.target.value;
            const selectedForm = document.querySelector(`[data-form="${selectedAlgorithm}"]`);


            forms.forEach(el => {
                if (!el.classList.contains('hidden')) {
                    el.classList.add('hidden')
                }
            });

            selectedForm.classList.remove("hidden")

        })

        const badgesDom = document.querySelector('[data-badges]');
        const badges = ['SphereFunction'];
        const objFunArr = document.querySelectorAll('[data-objfun]');

        const handleDelete = (e) => {
            console.log(badges)
            badges.splice(badges.indexOf(e.target.dataset.badgeDelete), 1);
            console.log(badges)

            badgesDom.innerHTML = `
                                                ${badges.map(badge => `
                                                    <div class="badge badge-info gap-2">
                                                        <svg data-badge-delete="${badge}" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-4 h-4 stroke-current"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                                                        ${badge}
                                                    </div>
                                                `).join('')}
                                            `

        }
        document.querySelectorAll('[data-badge-delete]').forEach(deleteEl => deleteEl.addEventListener('click', handleDelete))
        objFunArr.forEach(objFun => objFun.addEventListener('change', e => {

            if (badges.indexOf(e.target.value) === -1) {
                badges.push(e.target.value)
            }

            badgesDom.innerHTML = `
                                ${badges.map(badge => `
                                    <div class="badge badge-info gap-2">
                                        <svg data-badge-delete="${badge}" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-4 h-4 stroke-current"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                                        ${badge}
                                    </div>
                                `).join('')}
                            `

            document.querySelectorAll('[data-badge-delete]').forEach(deleteEl => deleteEl.addEventListener('click', handleDelete))
        }))
        
        $(document).ready(function () {
            const html = document.querySelector("html").dataset.theme = 'light'
            // Obsługa formularza ABC
            $("#abcForm").submit(function (event) {
                event.preventDefault();

                var optimizationParameters = {
                    parameters: [],
                    objectiveFunction: badges,
                    selectedAlgorithms: ["ABC"]
                };
                
        @foreach (var paramInfo in ViewBag.ParamsInfoList[0])
        {
            <text>
                        optimizationParameters.parameters.push(parseFloat($("#@paramInfo.Name").val()));
            </text>
        }

                    sendOptimizationRequest(optimizationParameters);
            });

            // Obsługa formularza Gradient
            $("#gradientForm").submit(function (event) {
                event.preventDefault();

                var optimizationParameters = {
                    parameters: [],
                    objectiveFunction: badges,
                    selectedAlgorithms: ["Gradient"]
                };
        @foreach (var paramInfo in ViewBag.ParamsInfoList[1])
        {
            <text>
                        optimizationParameters.parameters.push(parseFloat($("#@paramInfo.Name").val()));
            </text>
        }

                    sendOptimizationRequest(optimizationParameters);
            });

            $("#gtoaForm").submit(function (event) {
                event.preventDefault();

                var optimizationParameters = {
                    parameters: [],
                    objectiveFunction: badges,
                    selectedAlgorithms: ["GTOA"]
                };

        @foreach (var paramInfo in ViewBag.ParamsInfoList[2])
        {
            <text>
                        optimizationParameters.parameters.push(parseFloat($("#@paramInfo.Name").val()));
            </text>
        }

                    sendOptimizationRequest(optimizationParameters);
            });

            function sendOptimizationRequest(parameters) {
                $.ajax({
                    url: "/Home/RunOptimization",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(parameters),
                    success: function (data) {
                        // Usuń poprzednie wyniki
                        $("#resultsContainer").empty();
                        // Obsłuż wyniki dla każdego algorytmu

                        data.forEach(function (result) {
                            var resultElement = $("<div>");
                            resultElement.append("<p>Fitness Function: " + result.algorithm + "</p>");
                            resultElement.append("<p>Best Fitness: " + result.fitness + "</p>");
                            resultElement.append("<p>Best Solution: " + result.solution.join(", ") + "</p>");

                            $("#resultsContainer").append(resultElement);
                        });
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            }
        });
    </script>
}